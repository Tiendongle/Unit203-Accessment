import { useEffect, useState, useMemo, useRef } from 'react';
import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.scss'

import { CartState, CartItemProps } from '@/types';
import { CartItem } from '@/components/CartItem';

const SHIPPING = 15;
const TAX_RATE = 0.13;
const API_URL = 'http://localhost:3001';

// Helper Function to generate a random item
const generateRandomItem = (maxLength: number) => Math.floor(Math.random() * maxLength);

export default function Home({ lineItems = [] }) {
  const CART_ACTIONS = useMemo(() => ({
    removeLineItem: (lineItemId: number) => {
      if (!lineItemId) return;

      setCartState((current) => ({
        ...current,
        cartItems: current.cartItems.filter(lineItems => lineItems.id !== lineItemId)
      }))
      CART_ACTIONS.calculateFees();
    },
    addLineItem: (lineItem: number) => {
      if( lineItem > lineItems.length ) return;

      setCartState((current) => ({
        ...current,
        cartItems: [...current.cartItems, lineItems[lineItem]],
      }));

      CART_ACTIONS.calculateFees();
      if(!postalCodeRef.current) return;
      CART_ACTIONS.estimatedDeliveryDate(postalCodeRef?.current?.value);
    },
    calculateFees: () => {
      setCartState((current) => {
        if(!current.cartItems.length) return { ...current };
        const NEW_SUBTOTAL = current.cartItems.reduce((acc, {price}) => acc + price, current?.cartItems[0]?.price || 0);
        const TAX_TOTAL = NEW_SUBTOTAL * TAX_RATE;
        const NEW_SHIPPING = NEW_SUBTOTAL ? SHIPPING : 0;
        return {
          ...current,
          price: {
            subtotal: NEW_SUBTOTAL,
            taxes: TAX_TOTAL,
            shipping: NEW_SHIPPING,
            total: NEW_SUBTOTAL + NEW_SHIPPING + TAX_TOTAL,
          }
        }
      })
    },
    estimatedDeliveryDate: async (postalCode: string = '') => {
      if(!postalCode) return;
      const res = await fetch(`${API_URL}/${postalCode}`).then(res => res.json());
      const estimatedDeliveryDates = await res.lineItems;
      setCartState((current) => {
        return {
          ...current,
          cartItems: current.cartItems.map(item => ({
            ...item,
            estimatedDeliveryDate: estimatedDeliveryDates.find( (deliveryItem: CartItemProps) => deliveryItem.id === item.id ).estimatedDeliveryDate
          })),
        }
      })
    }
  }), []);

  // Basic State function. Should be converted to use Actions and Reducer given more time.
  const [cartState, setCartState] = useState<CartState>({
    cartItems: lineItems,
  });
  const postalCodeRef = useRef<HTMLInputElement>(null);

  // Calculate Cart Items on initial load
  useEffect(() => {
    CART_ACTIONS.calculateFees();
  }, [CART_ACTIONS]);
  
  return (
    <>
      <Head>
        <title>Unit 203</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>Your Cart</h1>
        {cartState?.cartItems && <div className={styles.cart}>
          {
            cartState.cartItems.map(( cartItem, key ) => <CartItem key={key} {...cartItem} removeItemFunction={(id) => {
              CART_ACTIONS.removeLineItem(id);
              CART_ACTIONS.calculateFees();
            }} />)
          }
        </div>}
        {cartState.price && <div className={styles.pricingData}>
          <ul>
            <li><p>Subtotal</p><p>${cartState.price.subtotal.toFixed(2)}</p></li>
            <li><p>Taxes (estimated)</p><p>${cartState.price.taxes.toFixed(2)}</p></li>
            <li><p>Shipping</p><p>${cartState.price.shipping.toFixed(2)}</p></li>
            <li><label>Postal Code</label><input type="text" ref={postalCodeRef} onChange={(event) => {CART_ACTIONS.estimatedDeliveryDate( event.target.value )}} /></li>
            <li className={styles.pricingData_totals}><p>Total</p><p>{cartState.price.total.toFixed(2)}</p></li>
          </ul>
        </div>}
        <button
          onClick={()=> {
            CART_ACTIONS.addLineItem(generateRandomItem(lineItems.length));
          }}
        >
          Add New Item
        </button>
        
      </main>
    </>
  )
}

export async function getServerSideProps() {
  // Fetch data from external API
  
  const res = await fetch(`${API_URL}`);
  const data = await res.json()

  // Pass data to the page via props
  return { props: { lineItems: data } }
}